// Generated by CoffeeScript 1.4.0

define(['jquery', 'application/routes/router', 'application/views/appView', 'application/models/slide', 'application/collections/slides', 'vendors/socketio/socketio'], function($, Router, AppView) {
  /*
      Gere les communication serveur
  */

  var Application;
  return Application = (function() {

    function Application() {
      this.socket = null;
      console.log("application construction");
    }

    Application.prototype.init = function() {
      var _this = this;
      console.log("admin init");
      this.socket = io.connect('http://localhost:3000');
      this.router = new Router(this.socket);
      this.socket.on('organisations', function(data) {
        console.log("g reçu les organisations suivantes: ", data);
        return _this.router.app.trigger('organisations', data);
      });
      this.socket.on('sslides', function(data) {
        console.log("received slides list");
        return _this.router.app.trigger('sslides', data);
      });
      this.socket.on('sent', function(data) {
        console.log('jai reçu ça', data);
        return _this.router.app.trigger('snext', data);
      });
      this.socket.on('slideCreated', function(data) {
        console.log('slide created', data);
        return _this.router.app.trigger('slideCreated', data);
      });
      this.socket.on('slideDeleted', function(data) {
        console.log('slide deleted', data);
        return _this.router.app.trigger('slideDeleted', data);
      });
      this.socket.on('slideUpdated', function(data) {
        console.log('slideUpdated', data);
        return _this.router.app.trigger('slideUpdated', data);
      });
      this.socket.on('sremove', function(data) {
        return _this.router.app.trigger('sremove', data);
      });
      this.socket.on('connect_failed', function(reason) {
        return console.log('connection refusé', reason);
      });
      this.socket.on('conferences', function(data) {
        console.log("app confList received", data);
        return _this.router.app.trigger('conferences', data);
      });
      this.socket.on('confCreated', function(data) {
        console.log('conf created: ', data);
        return _this.router.app.trigger('confCreated', data);
      });
      this.socket.on('orgCreated', function(data) {
        return _this.router.app.trigger('orgCreated', data);
      });
      this.socket.on('confdeleted', function(data) {
        console.log("conf deleted");
        return _this.router.app.trigger('confdeleted', data);
      });
      this.socket.on('orgdeleted', function(data) {
        console.log("org deleted");
        return _this.router.app.trigger('orgdeleted', data);
      });
      this.socket.on('orgupdated', function(data) {
        console.log("org updated: ", data);
        return _this.router.app.trigger('orgupdated', data);
      });
      this.socket.on('confupdated', function(data) {
        console.log("confupdated");
        return _this.router.app.trigger('confupdated', data);
      });
      this.router.on('newOrganisation', function(data) {
        return _this.socket.emit('newOrganisation', data);
      });
      this.router.on('newConference', function(data) {
        console.log("new conf ask created", data);
        return _this.socket.emit('newConference', data);
      });
      this.router.on('send', function(data) {
        return _this.socket.emit('send', data);
      });
      this.router.on('remove', function(data) {
        return _this.socket.emit('remove', data);
      });
      this.router.on('saveslide', function(data) {
        return _this.socket.emit('createSlide', data);
      });
      this.router.on('deleteSlide', function(data) {
        return _this.socket.emit('deleteSlide', data);
      });
      this.router.on('updateSlide', function(data) {
        return _this.socket.emit('updateSlide', data);
      });
      this.router.on('organisationChoosed', function(data) {
        console.log('ask confs');
        return _this.socket.emit('organisationChoosed', data);
      });
      this.router.on('conferenceChoosed', function(data) {
        console.log('ask confs');
        return _this.socket.emit('slider', data);
      });
      this.router.on('deleteconf', function(data) {
        return _this.socket.emit('deleteconf', data);
      });
      this.router.on('deleteorg', function(data) {
        console.log(data);
        return _this.socket.emit('deleteorg', data);
      });
      this.router.on('updateorg', function(data) {
        return _this.socket.emit('updateorg', data);
      });
      this.router.on('updateconf', function(data) {
        return _this.socket.emit('updateconf', data);
      });
      return this.socket.emit('admin', 'seba@rtbf.be');
    };

    return Application;

  })();
});
