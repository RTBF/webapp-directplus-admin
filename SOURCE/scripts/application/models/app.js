// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'backbone', 'application/collections/organisations', 'application/models/organisation'], function($, Backbone, Organisations, Organisation) {
  var App, _ref;

  return App = (function(_super) {
    __extends(App, _super);

    function App() {
      _ref = App.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    App.prototype.defaults = {
      organisations: new Organisations()
    };

    App.prototype.initialize = function() {
      var _this = this;

      this.on('organisations', function(data) {
        return _this.restore(data);
      });
      this.on('conferences', function(data) {
        return _this.restoreConf(data);
      });
      this.on('sslides', function(data) {
        console.log('call restore');
        return _this.restoreSlides(data);
      });
      this.on('snext', function(data) {
        console.log('app j ai recu le snext trigger', data);
        return _this.get('organisation').get('conference').sent(data);
      });
      this.on('sremove', function(data) {
        return _this.get('organisation').get('conference').back(data);
      });
      this.on('slideCreated', function(data) {
        return _this.get('organisation').get('conference')["new"](data);
      });
      this.on('slideDeleted', function(data) {
        return _this.get('organisation').get('conference')["delete"](data);
      });
      this.on('slideUpdated', function(data) {
        return _this.get('organisation').get('conference').update(data);
      });
      this.on('confCreated', function(data) {
        return _this.get('organisation').createConf(data);
      });
      this.on('orgCreated', function(data) {
        return _this.createOrg(data);
      });
      this.on('confdeleted', function(data) {
        return _this.get('organisation').deleteConf(data);
      });
      this.on('orgdeleted', function(data) {
        return _this.deleteOrg(data);
      });
      return this.on('orgupdated', function(data) {
        return _this.updateOrg(data);
      });
    };

    App.prototype.restore = function(data) {
      var len, organisation, x, _i;

      this.get('organisations').reset();
      len = data.length - 1;
      if (len >= 0) {
        for (x = _i = 0; 0 <= len ? _i <= len : _i >= len; x = 0 <= len ? ++_i : --_i) {
          organisation = new Organisation(data[x]);
          organisation.set("id", data[x]._id);
          this.get('organisations').add(organisation);
        }
      }
      this.trigger('change:organisations');
      return console.log(this.get('organisations'));
    };

    App.prototype.restoreConf = function(data) {
      return this.get('organisation').restore(data);
    };

    App.prototype.restoreSlides = function(data) {
      return this.get('organisation').get('conference').restore(data);
    };

    App.prototype.organisationChoosed = function(id) {
      var organisationsFound;

      organisationsFound = this.get('organisations').where({
        _id: id
      });
      console.log(organisationsFound[0]);
      return this.set('organisation', organisationsFound[0]);
    };

    App.prototype.createOrg = function(data) {
      var organisation;

      organisation = new Organisation(data);
      organisation.set("id", data._id);
      this.get('organisations').add(organisation);
      return this.trigger('new', this.get('organisations').get(data._id));
    };

    App.prototype.deleteOrg = function(data) {
      return this.get('organisations').remove(this.get('organisations').get(data));
    };

    App.prototype.updateOrg = function(data) {
      var org;

      console.log("app :", data);
      org = this.get('organisations').get(data._id);
      if (data.name) {
        this.get('organisations').get(data._id).name = data.name;
      }
      if (data.thumb) {
        this.get('organisations').get(data._id).thumb = data.thumb;
      }
      if (data.descrition) {
        return this.get('organisations').get(data._id).descrition = data.descrition;
      }
    };

    return App;

  })(Backbone.Model);
});
