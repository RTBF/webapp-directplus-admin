// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'backbone', 'application/models/slide', 'application/views/slideView', 'application/collections/slides', 'vendors/socketio/socketio'], function($, Backbone, Slide, SlideView, Slides) {
  var appView;
  return appView = (function(_super) {

    __extends(appView, _super);

    function appView() {
      return appView.__super__.constructor.apply(this, arguments);
    }

    appView.prototype.initialize = function() {
      var _this = this;
      this.slides = new Slides();
      this.slides.fetch();
      this.on('sslides', function(data) {
        return _this.render(data);
      });
      this.on('snext', function(data) {
        return _this.toSentList(data);
      });
      this.on('sremove', function(data) {
        return _this.toToSentList(data);
      });
      this.SlideListe = [];
      $('#sendbt').bind('click', function() {
        return _this.envoyer();
      });
      return $('#rembt').bind('click', function() {
        return _this.recuperer();
      });
    };

    appView.prototype.render = function(data) {
      var len, obj, slide, slideView, x, _i, _results;
      len = data.length - 1;
      _results = [];
      for (x = _i = 0; 0 <= len ? _i <= len : _i >= len; x = 0 <= len ? ++_i : --_i) {
        obj = $.parseJSON(data[x].JsonData);
        slide = new Slide(obj);
        slide.set("conf", data[x]._conf);
        slide.set("sent", data[x].Sent);
        slide.set("_id", data[x]._id);
        slide.set("Order", data[x].Order);
        slide.set("Type", data[x].Type);
        this.slides.add(slide);
        slide.save();
        this.slides.fetch();
        console.log(slide);
        slideView = new SlideView({
          model: slide
        });
        if (slide.get('sent')) {
          _results.push($('.Sent').append(slideView.render().el));
        } else {
          _results.push($('.toSend').append(slideView.render().el));
        }
      }
      return _results;
    };

    appView.prototype.envoyer = function() {
      var id, slide;
      id = $('input:radio[name=slides]:checked').parent().parent().attr('id');
      slide = this.slides.get(id);
      return this.trigger('send', slide.toJSON());
    };

    appView.prototype.toSentList = function(data) {
      var lid, slideView;
      console.log(data);
      lid = '#' + data.id;
      slideView = new SlideView({
        model: this.slides.get(data.id)
      });
      console.log(slideView);
      console.log(slideView.render().el);
      $('.Sent').append(slideView.render().el);
      return $(lid).parent().parent().remove();
    };

    appView.prototype.recuperer = function() {
      var id, slide;
      id = $('input:radio[name=slides]:checked').parent().parent().attr('id');
      slide = this.slides.get(id);
      return this.trigger('remove', slide.toJSON());
    };

    appView.prototype.toToSentList = function(data) {
      var lid, slideView;
      console.log("je suis ic", data);
      lid = '#' + data.id;
      $(lid).parent().parent().remove();
      slideView = new SlideView({
        model: this.slides.get(data.id)
      });
      return $('.toSend').append(slideView.render().el);
    };

    return appView;

  })(Backbone.View);
});
