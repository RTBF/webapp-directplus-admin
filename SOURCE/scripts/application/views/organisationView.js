// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'backbone', 'application/views/conferenceView'], function($, Backbone, ConferenceView) {
  var OrganisationView, _ref;

  return OrganisationView = (function(_super) {
    __extends(OrganisationView, _super);

    function OrganisationView() {
      _ref = OrganisationView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    OrganisationView.prototype.tagName = 'li';

    OrganisationView.prototype.className = 'organisation';

    OrganisationView.prototype.events = {
      'click .org-item': 'choose',
      'click #deleteorg': 'deleteorg'
    };

    OrganisationView.prototype.template = _.template($('#Organisation-template').html());

    OrganisationView.prototype.templateset = _.template($('#orgsettings-template').html());

    OrganisationView.prototype.initialize = function() {
      var _this = this;

      this.listenTo(this.model, 'change', this.render);
      this.listenTo(this.model, 'change:conferencesC', this.renderConfList);
      this.listenTo(this.model, 'new', function(data) {
        return _this.renderNew(data);
      });
      return this.listenTo(this.model, 'remove', this.remove);
    };

    OrganisationView.prototype.render = function() {
      console.log('render');
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    OrganisationView.prototype.renderConfList = function() {
      $('.conf').remove();
      console.log(this.model.get('conferencesC'));
      return this.model.get('conferencesC').each(function(conference) {
        var conferenceView;

        conferenceView = new ConferenceView({
          model: conference
        });
        return $('.confList').prepend(conferenceView.render().el);
      });
    };

    OrganisationView.prototype.renderNew = function(conference) {
      var conferenceView;

      conferenceView = new ConferenceView({
        model: conference
      });
      return $('.confList').prepend(conferenceView.render().el);
    };

    OrganisationView.prototype.choose = function(ev) {
      var data, href, id;

      $(".organisationsList li").each(function(i, elt) {
        return $(elt).removeClass('active');
      });
      this.$el.addClass('active');
      $('.organisationsList').trigger('organisationChoosed', this.model.get('id'));
      $(".confplus").parent().show();
      id = this.model.get('id');
      href = '/conference/' + id;
      $(".orgsettings").remove();
      console.log('model:', this.model);
      if (this.model) {
        data = this.model.toJSON();
        data.save = true;
        $('.confsblock').prepend(this.templateset(data));
      } else {
        $('.confsblock').prepend(this.templateset({
          name: '',
          thumb: '',
          description: '',
          save: true
        }));
      }
      return Backbone.history.navigate(href, {
        trigger: true
      });
    };

    OrganisationView.prototype.deleteorg = function() {
      console.log("clicked on trash icon");
      if (confirm("Are you sure?")) {
        return $('#deleteorg').trigger('deleteorg', this.model.get('id'));
      }
    };

    OrganisationView.prototype.remove = function() {
      var id;

      id = '#' + this.model.get('id');
      return $(id).parent().slideUp();
    };

    return OrganisationView;

  })(Backbone.View);
});
